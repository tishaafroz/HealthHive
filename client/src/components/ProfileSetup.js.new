import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import PersonalDetails from './PersonalDetails';
import ActivityLevel from './ActivityLevel';
import GoalSetting from './GoalSetting';
import Confetti from 'react-confetti';
import { useWindowSize } from '@react-hook/window-size';
import { 
  FaUser, 
  FaRunning, 
  FaBullseye, 
  FaUtensils, 
  FaCheckCircle,
  FaArrowRight,
  FaArrowLeft
} from 'react-icons/fa';
import '../styles/ProfileSetup.css';

const steps = [
  'Personal Details',
  'Activity Level',
  'Goals',
  'Dietary Preferences',
  'Review & Complete'
];

const ProfileSetup = () => {
  const { updateProfileComplete } = useAuth();
  const navigate = useNavigate();
  const { width, height } = useWindowSize();
  const [currentStep, setCurrentStep] = useState(0);
  const [formData, setFormData] = useState({
    personalDetails: {
      age: '',
      height: '',
      weight: '',
      gender: ''
    },
    activityLevel: '',
    goals: {
      primaryGoal: '',
      targetWeight: '',
      weeklyGoal: ''
    },
    dietaryPreferences: {
      restrictions: [],
      preferences: [],
      allergies: []
    }
  });
  const [loading, setLoading] = useState(false);
  const [showConfetti, setShowConfetti] = useState(false);
  const [error, setError] = useState(null);

  const validateStep = (step) => {
    switch (step) {
      case 0: // Personal Details
        if (!formData.personalDetails.age || !formData.personalDetails.height ||
            !formData.personalDetails.weight || !formData.personalDetails.gender) {
          return 'Please fill in all personal details';
        }
        break;
      case 1: // Activity Level
        if (!formData.activityLevel) {
          return 'Please select your activity level';
        }
        break;
      case 2: // Goals
        if (!formData.goals.primaryGoal || !formData.goals.weeklyGoal) {
          return 'Please set your goals';
        }
        break;
      default:
        return null;
    }
    return null;
  };

  const handleNext = () => {
    const error = validateStep(currentStep);
    if (error) {
      setError(error);
      return;
    }
    setError(null);
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrevious = () => {
    setError(null);
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleFormDataUpdate = (stepData, stepName) => {
    setFormData(prev => ({
      ...prev,
      [stepName]: stepData
    }));
    setError(null);
  };

  const handleSubmit = async () => {
    setLoading(true);
    setError(null);

    try {
      // Final validation
      const error = validateStep(currentStep);
      if (error) {
        throw new Error(error);
      }

      // Prepare profile data
      const profileData = {
        age: parseInt(formData.personalDetails.age),
        height: parseFloat(formData.personalDetails.height),
        weight: parseFloat(formData.personalDetails.weight),
        gender: formData.personalDetails.gender,
        activityLevel: formData.activityLevel,
        goals: {
          primaryGoal: formData.goals.primaryGoal,
          targetWeight: formData.goals.targetWeight ? parseFloat(formData.goals.targetWeight) : null,
          weeklyGoal: formData.goals.weeklyGoal
        },
        dietaryPreferences: formData.dietaryPreferences,
        profileComplete: true
      };

      // Update user profile
      const token = localStorage.getItem('token');
      await axios.put('/api/users/update-profile', profileData, {
        headers: { 
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      // Update local state
      updateProfileComplete(true);
      
      // Show success animation
      setShowConfetti(true);
      
      // Redirect to dashboard after a short delay
      setTimeout(() => {
        navigate('/dashboard');
      }, 2000);
    } catch (error) {
      console.error('Error saving profile:', error);
      setError(error.response?.data?.message || error.message || 'Failed to save profile. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleSetupLater = () => {
    updateProfileComplete(false);
    navigate('/dashboard');
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <PersonalDetails
            data={formData.personalDetails}
            onUpdate={(data) => handleFormDataUpdate(data, 'personalDetails')}
          />
        );
      case 1:
        return (
          <ActivityLevel
            data={formData.activityLevel}
            onUpdate={(data) => handleFormDataUpdate(data, 'activityLevel')}
          />
        );
      case 2:
        return (
          <GoalSetting
            data={formData.goals}
            onUpdate={(data) => handleFormDataUpdate(data, 'goals')}
          />
        );
      case 3:
        return (
          <div className="dietary-preferences">
            <div className="coming-soon-container">
              <div className="coming-soon-icon">
                <FaUtensils />
              </div>
              <h3>Dietary Preferences</h3>
              <p className="coming-soon-text">
                We're working on making this feature available to help you track your dietary preferences,
                restrictions, and allergies. For now, you can continue with the basic setup.
              </p>
            </div>
          </div>
        );
      case 4:
        return (
          <div className="profile-review">
            <h3>Review Your Profile</h3>
            <div className="review-section">
              <h4><FaUser /> Personal Details</h4>
              <p>Age: {formData.personalDetails.age} years</p>
              <p>Height: {formData.personalDetails.height} cm</p>
              <p>Weight: {formData.personalDetails.weight} kg</p>
              <p>Gender: {formData.personalDetails.gender}</p>
            </div>
            <div className="review-section">
              <h4><FaRunning /> Activity Level</h4>
              <p>{formData.activityLevel}</p>
            </div>
            <div className="review-section">
              <h4><FaBullseye /> Goals</h4>
              <p>Primary Goal: {formData.goals.primaryGoal}</p>
              {formData.goals.targetWeight && (
                <p>Target Weight: {formData.goals.targetWeight} kg</p>
              )}
              <p>Weekly Goal: {formData.goals.weeklyGoal}</p>
            </div>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="profile-setup">
      {showConfetti && <Confetti width={width} height={height} />}
      
      <div className="setup-container">
        <div className="progress-bar">
          {steps.map((step, index) => (
            <div 
              key={step} 
              className={`progress-step ${index === currentStep ? 'active' : ''} ${index < currentStep ? 'completed' : ''}`}
            >
              <div className="step-indicator">
                {index < currentStep ? <FaCheckCircle /> : index + 1}
              </div>
              <span className="step-label">{step}</span>
            </div>
          ))}
        </div>

        <div className="setup-content">
          {error && <div className="error-message">{error}</div>}
          {renderStepContent()}
        </div>

        <div className="setup-actions">
          {currentStep > 0 && (
            <button onClick={handlePrevious} disabled={loading}>
              <FaArrowLeft /> Previous
            </button>
          )}
          
          {currentStep < steps.length - 1 ? (
            <button onClick={handleNext} disabled={loading}>
              Next <FaArrowRight />
            </button>
          ) : (
            <div className="final-actions">
              <button onClick={handleSetupLater} className="setup-later" disabled={loading}>
                Complete Setup Later
              </button>
              <button onClick={handleSubmit} className="complete-setup" disabled={loading}>
                {loading ? 'Saving...' : 'Complete Setup'}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProfileSetup;
